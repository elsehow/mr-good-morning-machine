* mr good morning machine

mr good morning machine (mgmm) prints me a wakeup script, over my [[https://github.com/elsehow/sap/][iot printer, sap]].

this is not meant to run not on the printer. i run it on a machine i leave at work. it communicates with the printer through an [[https://github.com/elsehow/indra-server][indra]] server.

** DONE setup
CLOSED: [2016-02-11 Thu 23:52]

first, we'll install the software. then, we'll configure cron to run our script in the mornings.

*** DONE installation
CLOSED: [2016-02-11 Thu 23:52]

first, install the dependencies + make 

#+BEGIN_SRC shell
npm install
#+END_SRC

now, write a file =config.js= with your printer api key. should look like this:

#+BEGIN_SRC js
module.exports = 'my-very-secret-api-key'
#+END_SRC

now, you can give it a test with

#+BEGIN_SRC shell
bash mgmm.sh
#+END_SRC

*** DONE configuring cron 
CLOSED: [2016-02-11 Thu 23:51]

now we want cron to run this script in the mornings

add a line like this to your crontab:

#+BEGIN_SRC
* * * * * cd /home/ffff/BitTorrent\ Sync/Projects/mr-good-morning-machine; npm start 
#+END_SRC

just be sure to replace that path with the path to wherever you downloaded this repository

* implementation

here is all the code for mr good morning machine

** DONE helper scripts
CLOSED: [2016-02-11 Thu 23:40]
*** DONE org-agenda.sh
CLOSED: [2016-02-11 Thu 22:10]

this bash script will export our org agenda over stdout

#+BEGIN_SRC shell :tangle org-agenda.sh
#!/bin/bash
emacs -batch -eval '(org-batch-agenda "a" 
org-agenda-span (quote day) 
org-agenda-files 
(quote ("~/BitTorrent Sync/Notes/"))
)))' | 
sed -e 's/fun://g' |  # remove fun: bits
sed -e 's/spring://g'  |  # remove spring: bits
sed -e 's/^[ \t]*//' |  # remove trailing whitespace
sed '/now/d' | # remove the line that says now
sed 's/\.\.\.\.\.\.\ /\.\.\./g' # remove extraneous dots
#+END_SRC

*** DONE storyteller.js

storyteller.js lets us tell stories, one bit at a time, over many mornigns

**** usage

we pass in a story -s and a logfile -l

#+BEGIN_SRC shell
node storyteller.js -s havamal.txt -l havamal.log
#+END_SRC

**** specs

the story is a txt file, where "passages" are separated by =\n\n=

the logfile holds our "passage" number in the story. it will be created if it doesn't exit.

the logfile is updated (passage number is incremented) on every run.

**** DONE implementation
CLOSED: [2016-02-11 Thu 23:57]

#+BEGIN_SRC js :tangle storyteller.js
'use strict';
var fs = require('fs')
// parse command line args
var argv = require('minimist')(process.argv.slice(2));
// try reading -s
var story = fs.readFileSync(argv.s, 'utf8')
// create -l if it doesnt exist
try {
  fs.readFileSync(argv.l)
} catch (e) {
  fs.writeFileSync(argv.l, 0)
}
// read -l to get the passage number
var passage_num = parseInt(fs.readFileSync(argv.l, 'utf8'))
// the script prints today's passage from the story over stdout
var passage = story.split('\n\n')[passage_num]
console.log(passage)
// finally, we increment line 
// and write this updated number to the log file passed in as -l
fs.writeFileSync(argv.l, passage_num+1)
#+END_SRC

*** DONE weather.js

this prints the weather in berkeley

uses the [[https://openweathermap.org][openweathermap]] api 

#+BEGIN_SRC js :tangle weather.js
var request = require('request'),
    uri = 'http://api.openweathermap.org/data/2.5/forecast/daily?lat=37.8554&lon=-122.2839&appid=44db6a862fba0b067b1930da0d769e98&units=imperial'

function formatWeather (day) {
  return `~${day.weather[0].description}~\n` +
    `day: ${day.temp.day}F\n` +
    `eve: ${day.temp.eve}F\n` +
    `night: ${day.temp.night}F\n\n` +
    `${day.humidity}% humidity ` +
    `${day.clouds}% cloud cover ` +
    `wind speed ${day.speed} m/h`
}

request.get(uri, (err, res, body) => {
  var today = JSON.parse(body).list[0]
  console.log(formatWeather(today))
})
#+END_SRC
*** DONE top-nyt.json

will synchronously grab the top 3 homepage headlines and top 5 world headlines from nyt

#+BEGIN_SRC js :tangle top-nyt.js
var request = require('sync-request')
var api_key = '83a1f6fca9d35d99fe1d0d8b113a44ce:10:65643897'

// top n headlines in any section
function top_headlines (section, n) {

  function uri (section) {
    return `http://api.nytimes.com/svc/topstories/v2/${section}.json?api-key=${api_key}`
  }

  var r = request('GET', uri(section))

  var stories = JSON.parse(r.body).results

  // top 5 headlines
  return stories.slice(0,n).map(r => r.title)
}

console.log(top_headlines('home', 2).join('\n'))
console.log(top_headlines('world', 2).join('\n'))
#+END_SRC
** DONE make-wakeup-script.sh
CLOSED: [2016-02-11 Thu 23:36]

the python script prints stuff on the command line

#+BEGIN_SRC python :tangle make-wakeup-script.sh
#!/bin/bash
function whitespace () {
  echo ""
  echo ""
}
#+END_SRC
*** DONE prompt me to write down my dreams
#+BEGIN_SRC python :tangle make-wakeup-script.sh
echo "What did you dream about?"
whitespace
#+END_SRC
*** DONE unix fortune
CLOSED: [2016-02-11 Thu 21:51]
#+BEGIN_SRC shell :tangle make-wakeup-script.sh
fortune
whitespace
#+END_SRC
*** DONE poetic edda
CLOSED: [2016-02-11 Thu 22:35]
i'll work myself day by day thruogh the poetic edda
#+BEGIN_SRC shell :tangle make-wakeup-script.sh
echo "the poetic edda"
echo "---------------"
node storyteller.js -s havamal.txt -l havamal.log
whitespace
#+END_SRC
*** DONE my org agenda for the day
CLOSED: [2016-02-11 Thu 21:52]
#+BEGIN_SRC shell :tangle make-wakeup-script.sh
bash org-agenda.sh
whitespace
#+END_SRC
*** DONE the weather 
CLOSED: [2016-02-11 Thu 23:34]
#+BEGIN_SRC shell :tangle make-wakeup-script.sh
echo "weather berkeley ca"
echo "~~~~~~~~~~~~~~~~~~~~"
node weather.js
whitespace
#+END_SRC
*** DONE top nytimes headlines
CLOSED: [2016-02-12 Fri 10:01]
#+BEGIN_SRC shell :tangle make-wakeup-script.sh
echo "=the nyt=="
node top-nyt.js
whitespace
#+END_SRC

** DONE mgmm.sh
CLOSED: [2016-02-11 Thu 22:10]

sends the whole thing in a message to the server

#+BEGIN_SRC shell :tangle mgmm.sh
#!/bin/bash
node client.js "`bash make-wakeup-script.sh`"
#+END_SRC

* TODO future plans
** DONE clean up org agenda output
CLOSED: [2016-02-12 Fri 09:35]
** TODO tao te ching
** TODO oblique strategies
** TODO hacker news headlines
another api thing
** TODO NYtimes headlines
another api thing or scraping
